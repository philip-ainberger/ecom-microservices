version: '3.4'

name: ecom-local

services:
  authenticationservice:
    image: ${DOCKER_REGISTRY-}authenticationservice
    build:
      context: .
      dockerfile: AuthenticationService/Dockerfile
    ports:
      - "8080:8080"
    networks:
      - ecom
    depends_on:
      - otel-collector
    environment:
      - TokenServiceEndpoint__ClientCertificatePath=/etc/ssl/certs/client.crt
      - TokenServiceEndpoint__ClientCertificatePassword=12345
      - ASPNETCORE_Kestrel__Certificates__Default__TrustStore=/etc/ssl/certs/ca.crt
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/etc/ssl/certs/wildcard.crt
      - ASPNETCORE_Kestrel__Certificates__Default__KeyPath=/etc/ssl/certs/wildcard.key
    volumes:
      - ./.cert/client.crt:/etc/ssl/certs/client.crt
      - ./.cert/ca.crt:/etc/ssl/certs/ca.crt
      - ./.cert/wildcard.crt:/etc/ssl/certs/wildcard.crt
      - ./.cert/wildcard.key:/etc/ssl/certs/wildcard.key

  tokenservice:
    image: ${DOCKER_REGISTRY-}tokenservice
    container_name: tokenservice
    
    build:
      context: .
      dockerfile: TokenService/Dockerfile
    ports:
      - "8090:8082"
    networks:
      ecom:
        aliases:
          - tokenservice.ecom.dev
    depends_on:
      - otel-collector
    environment:      
      - CustomCertificate__CertificatePath=/etc/ssl/certs/ca.crt
      - CustomCertificate__CertificatePassword=12345
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/etc/ssl/certs/wildcard.crt
      - ASPNETCORE_Kestrel__Certificates__Default__KeyPath=/etc/ssl/certs/wildcard.key
    volumes:
      - ./.cert/ca.crt:/etc/ssl/certs/ca.crt
      - ./.cert/wildcard.crt:/etc/ssl/certs/wildcard.crt
      - ./.cert/wildcard.key:/etc/ssl/certs/wildcard.key
  
  gatewayservice:
    image: ${DOCKER_REGISTRY-}gatewayservice
    build:
      context: .
      dockerfile: GatewayService/Dockerfile
    ports:
      - "443:8082"
    networks:
      ecom:
        aliases:
          - gateway.ecom.dev
    environment:
      - TokenServiceEndpoint__ClientCertificatePath=/etc/ssl/certs/client.crt
      - TokenServiceEndpoint__ClientCertificatePassword=12345  
      - ASPNETCORE_Kestrel__Certificates__Default__TrustStore=/etc/ssl/certs/ca.crt
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/etc/ssl/certs/wildcard.crt
      - ASPNETCORE_Kestrel__Certificates__Default__KeyPath=/etc/ssl/certs/wildcard.key
    volumes:
      - ./.cert/client.crt:/etc/ssl/certs/client.crt
      - ./.cert/ca.crt:/etc/ssl/certs/ca.crt
      - ./.cert/wildcard.crt:/etc/ssl/certs/wildcard.crt
      - ./.cert/wildcard.key:/etc/ssl/certs/wildcard.key

  inventoryservice:
    image: ${DOCKER_REGISTRY-}inventoryservice
    build:
      context: .
      dockerfile: InventoryService/Dockerfile
    networks:
      ecom:
        aliases:
          - inventoryservice.ecom.dev
    environment:
      - ASPNETCORE_Kestrel__Certificates__Default__TrustStore=/etc/ssl/certs/ca.crt
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/etc/ssl/certs/wildcard.crt
      - ASPNETCORE_Kestrel__Certificates__Default__KeyPath=/etc/ssl/certs/wildcard.key
    volumes:
      - ./.cert/ca.crt:/etc/ssl/certs/ca.crt
      - ./.cert/wildcard.crt:/etc/ssl/certs/wildcard.crt
      - ./.cert/wildcard.key:/etc/ssl/certs/wildcard.key

  # POSTGRESQL
  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"    
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    networks:
      - ecom

  # ELASTIC
  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:8.13.0
    environment:
       - discovery.type=single-node
       - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
       - xpack.security.enabled=false
       - bootstrap.memory_lock=true
    #volumes:
    #  - ./.data/elastic-volume:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - ecom

  # KIBANA
  kibana:
    image: kibana:8.13.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - ecom
    depends_on:
      - elasticsearch

  # GRAFANA
  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - "3000:3000"
    networks:
      - ecom

  # PROMETHEUS
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - otel-collector
    networks:
      - ecom
 
  # OPENTELEMETRY COLLECTOR
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4318:4318" # HTTP
      - "4317:4317" # GRPC
      - "8889:8889"
      - "13133:13133"
      - "55679:55679" # zPages (debug )
    depends_on:
      - zipkin
    networks:
      - ecom
      
  # ZIPKIN
  zipkin:
    image: openzipkin/zipkin:latest    
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - ecom

  # RABBITMQ
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    #volumes:
    #   - ./.data/rabbitmq:/var/lib/rabbitmq
    networks:
      - ecom


networks:
  ecom:
    name: ecom
    driver: bridge


